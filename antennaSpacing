U = 10;
length = 15*U; // Length of the parallelepiped in cm
width = 7*U;   // Width of the parallelepiped in cm
height = 2*U;  // Height of the parallelepiped in cm
// Hole dimensions
hole_diameter = 1.35*U;   // Hole diameter in cm
hole_radius = hole_diameter / 2;
hole_distance = 3.7948*U;  // Distance between hole centers in cm
antenna_thickness = 0.75*U;
// support
radius_s = 1*U;
len_s = 1*U;
width_s = 3*U;
height_s = 10*U;
space = 0.1*U;
// Create the parallelepiped

difference() {
    // Base parallelepiped
    cube([length, width, height],center = true);

    // Holes for plugs
    for (i = [1:2]) {
        translate([i * hole_distance - 0.5 * hole_distance, 0, -height/2]) {
            cylinder(h = height*2, r = hole_radius, center = true, $fn = 100); //
        }
    }
    for (i = [1:2]) {
        translate([-i * hole_distance + 0.5 * hole_distance, 0, -height/2]) {
            cylinder(h = height*2, r = hole_radius, center = true, $fn = 100);
        }
    }

    // Top spacing
    for (i = [1:2]) {
        translate([i * hole_distance - 0.5 * hole_distance, hole_radius, height/2]) {
            cube([hole_diameter, 3, height], center = true);
        }
    }
    for (i = [1:2]) {
        translate([-i * hole_distance + 0.5 * hole_distance, hole_radius, height/2]) {
            cube([hole_diameter, 3, height], center = true);
        }
    }

    // Holes for antennas
    for (i = [1:2]) {
        translate([i * hole_distance - 0.5 * hole_distance - 0.5 * hole_radius, hole_radius + 0.25, -height * 0.4]) {
            cube([antenna_thickness, width/2, height]);
        }
    }
    for (i = [1:2]) {
        translate([-i * hole_distance + 0.5 * hole_distance - 0.5 * hole_radius, hole_radius + 0.25, -height * 0.4]) {
            cube([antenna_thickness, width/2, height]);
        }
    }
    translate([0, -width*0.75, 0]) {
        cube([length, width, height], center = true);
    }
    translate([0, width/2 + hole_radius + 0.25, height/2]) {
        cube([length, width, height], center = true);
   }

   // spaces for support
    translate([+length/2, -width/20, 0]){
        cylinder(height,radius_s,radius_s,$fn=3, center=true); // height, r1, r2
    }
    translate([-length/2, -width/20, 0]){
        rotate([0, -180, 0]){
            cylinder(height,radius_s,radius_s,$fn=3, center=true); // height, r1, r2
        }
    }
}


translate([0, -width/2, space/2]){
    rotate([0, 90, 0]){
        union(){ // support R

            cylinder(height_s,radius_s-space,radius_s-space,$fn=3, center=true); // height, r1, r2
            translate([(len_s/2+space), 0, 0]){
                cube([len_s, width_s, height_s],center = true);
                }
        }
    }
}

translate([0, -width/2-width_s*1.2, space/2]){
    rotate([0, 90, 0]){
        union(){ // support L

            cylinder(height_s,radius_s-space,radius_s-space,$fn=3, center=true); // height, r1, r2
            translate([(len_s/2+space), 0, 0]){
                cube([len_s, width_s, height_s],center = true);
                }
        }
    }
}
